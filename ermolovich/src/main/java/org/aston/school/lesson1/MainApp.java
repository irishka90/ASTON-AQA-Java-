package org.aston.school.lesson1;

import java.util.Arrays;

public class MainApp {
    public static void main(String[] args) {

        ///Задание 1. Создать классы Собака и Кот с наследованием от класса Животное.
        //
        //Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия. Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');
        //
        //У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).
        //
        // Добавить подсчет созданных котов, собак и животных.
        //
        //Расширить задачу про котов и тарелки с едой, выполнив следующие пункты:
        //Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды (например, в миске 10 еды, а кот пытается покушать 15-20).
        //Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось покушать (хватило еды), сытость = true.
        //Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
        //Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и потом вывести информацию о сытости котов в консоль.
        //Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.

        Cat cat1 = new Cat("Вася", 15); //создала кота
        cat1.run(400);                        //кот побежал
        cat1.swim(23);                     // кот поплыл

        Dog dog = new Dog("Альфа");            //создала собаку
        dog.run(300);                     //собака побежала
        dog.swim(9);            //собака поплыла
        dog.swim(12);

        Dog dog1=new Dog("Булька");
        dog1.swim(4);
        dog1.run(600);

        Plate plate = new Plate(50); // Создана тарелка с изначальным значением 50

        Cat[] cats = new Cat[7];         //Создается массив котов
        for (int i = 0; i < cats.length; i++) {
            Cat cat = new Cat("Кот " + (i + 1), i + 10); //создаю кота

            //добавляем в тарелку столько еды, чтобы кот мог поесть
            if (plate.getValue() - cat.getFoodToEat() < 0) {
                plate.addFood(cat.getFoodToEat() - plate.getValue());
            }
            //проверяю, может ли кот поесть
            if (plate.getValue() - cat.getFoodToEat() >= 0) {
                plate.eatFood(cat.getFoodToEat()); //вычитаю еду из тарелки
                cat.setFeedComplete(true);   //отмечаю, что кот поел
            }
            cats[i] = cat;
            // System.out.println(plate);  //вывожу значение тарелки, после каждого кота
        }

        System.out.println(Arrays.toString(cats)); // вывожу всех котов из массива с указанием, сыт кот или голоден

        System.out.println("Count animals:" + Animal.getCount()); //считаем общее количество созданных животных
        System.out.println("Count cats:" + Cat.getCount());    // считаем созданных котов
        System.out.println("Count dogs:" + Dog.getCount());   //считаем созданных собак


        ///Задание 2.Применяя интерфейсы написать программу расчета периметра и площади геометрических фигур:
        // круг, прямоугольник, треугольник.
        //Задать для каждой фигуры цвет заливки и цвет границы.
        //Результат полученных характеристик [ Периметр, площадь, цвет фона, цвет границ ]
        // по каждой фигуре вывести в консоль.

        Triangle triangle = new Triangle(3, 4, 5, "Синий", "Желтый");
        Circle circle = new Circle(3, "Зеленый", "Белый");
        Rectangle rectangle = new Rectangle(3, 5, "Желтый", "Красный");

        System.out.println(triangle);
        System.out.println(circle);
        System.out.println(rectangle);


    }


    ;

}
